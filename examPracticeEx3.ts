// VERSION WITH FOR NOT REPLACED ( ALL COMMENTED OUT SINCE WE ARE INTERESTED IN THE ONE WITHOUT FOR)

/*
type coordinate = {
    x:number,
    y:number
}

const processData = (data: coordinate[], maximum: number): boolean => {
    for(let i=0;i<data.length;i++){
    data[i].x = data[i].x - 5
    }
    let result: coordinate[] = []
    for(let j=0;j<data.length;j++) {
        if (data[j].y > 0) {
            result.push(data[j])
        }
    }
    for(let k=0; k<result.length; k++) {
        let distance = Math.sqrt(result[k].x * result[k].x + result[k].y * result[k].y)
        if (distance > maximum) {
            console.log('the condition is met!')
        return true
    }
}
console.log('the condition is NOT met!')
return false
    }

    const data: coordinate[] = [{x:1,y:2},{x:3,y:5}]
    console.log(processData(data,4))

*/



// VERSION WITH FOR REPLACED BY USING FUNCTIONAL PROGRAMMING

type coordinate = {
    x:number,
    y:number
}

const processData = (data: coordinate[], maximum: number): boolean => {
    // I delete the for since map does it automathically. Map is already a function into an api that I call into a loop which go thrugh all elements!!!
        const decreasedX = data.map(mappedCoordinate => mappedCoordinate = {x: mappedCoordinate.x-5 , y: mappedCoordinate.y})

    // I replace data with decreasedX since it is the new array generated by the map function

    /* old code without filter function (where I put decreasedX)
    for(let j=0;j<decreasedX.length;j++) {
        if (decreasedX[j].y > 0) {
            result.push(decreasedX[j])
        }
    }
    */
    const result: coordinate[] = decreasedX.filter(filtered => filtered.y > 0)
    
/*
    for(var k=0; k<result.length; k++) {
        var distance = Math.sqrt(result[k].x * result[k].x + result[k].y * result[k].y)
        if (distance > maximum) {
            console.log('the condition is met!')
        return true
    }
}
*/

    return result.some(s => {
        const distance = Math.sqrt(s.x * s.x + s.y * s.y)   // since I wanted to give the name distance to "Math.sqrt ..." I used lambda expression to achieve this purpose.
        return distance > maximum
        })

    }

    const data: coordinate[] = [{x:1,y:2},{x:3,y:5}]
    console.log(processData(data,4))